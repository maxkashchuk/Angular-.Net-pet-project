{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Input, NgModule } from '@angular/core';\nimport * as i1 from '@alyle/ui';\nimport { eachMedia, StyleCollection, StyleRenderer } from '@alyle/ui';\nconst STYLE_PRIORITY = -1;\nconst ALIGN_ALIAS = {\n  rowReverse: 'row-reverse',\n  columnReverse: 'column-reverse',\n  wrapReverse: 'wrap-reverse',\n  start: 'flex-start',\n  end: 'flex-end',\n  between: 'space-between',\n  around: 'space-around',\n  evenly: 'space-evenly'\n};\n\nconst STYLES = () => ({\n  $priority: STYLE_PRIORITY,\n  $name: LyGrid.и,\n  root: _className => `${_className}{width:100%;display:flex;flex-wrap:wrap;box-sizing:border-box;}`,\n  item: _className => `${_className},${_className} > :first-child{box-sizing:border-box;}`\n});\n/**\n * Grid container\n */\n\n\nlet LyGrid = /*#__PURE__*/(() => {\n  class LyGrid {\n    constructor(theme, el) {\n      this.theme = theme;\n      this.el = el;\n      /**\n       * Styles\n       * @docs-private\n       */\n\n      this.classes = this.theme.renderStyleSheet(STYLES);\n      this.el.nativeElement.classList.add(this.classes.root);\n    }\n\n    get spacingX() {\n      return this._spacingX;\n    }\n\n    set spacingX(val) {\n      if (val !== this.spacingX) {\n        this._spacingX = val;\n\n        this._createSpacingClass(undefined, val);\n      }\n    }\n\n    get spacingY() {\n      return this._spacingY;\n    }\n\n    set spacingY(val) {\n      if (val !== this.spacingY) {\n        this._spacingY = val;\n\n        this._createSpacingClass(undefined, undefined, val);\n      }\n    }\n    /**\n     * Defines the space between the component with the `item` attribute.\n     * Support breakpoints\n     */\n\n\n    get spacing() {\n      return this._spacing;\n    }\n\n    set spacing(val) {\n      if (val !== this.spacing) {\n        this._spacing = val;\n\n        this._createSpacingClass(val);\n      }\n    }\n    /**\n     * Only one param must be defined\n     */\n\n\n    _createSpacingClass(xy, x, y) {\n      const newSpacingClass = this.theme.addStyle(`lyGrid-spacing:${xy}·${x}·${y}`, theme => {\n        const val = xy || x || y;\n        const spacingStyles = {};\n        eachMedia(val, (value, media) => {\n          const valuePadding = `${+value / 2}px`;\n          const padding = xy != null ? valuePadding : x != null ? `0 ${valuePadding}` : `${valuePadding} 0`;\n\n          if (media) {\n            spacingStyles[theme.getBreakpoint(media)] = {\n              padding\n            };\n          } else {\n            spacingStyles.padding = padding;\n          }\n        });\n        return spacingStyles;\n      }, undefined, undefined, STYLE_PRIORITY);\n\n      if (xy) {\n        this._spacingClass = newSpacingClass;\n      } else {\n        if (x) {\n          this._spacingXClass = newSpacingClass;\n        }\n\n        if (y) {\n          this._spacingYClass = newSpacingClass;\n        }\n      }\n\n      this._negativeMarginClass = this.theme.addStyle(`lyGrid-negative-margin:${xy}·${x}·${y}`, theme => {\n        const val = xy || x || y;\n        let negativeMarginStyles;\n        eachMedia(val, (value, media) => {\n          const valueMargin = `${-value / 2}px`;\n          const margin = xy != null ? valueMargin : x != null ? `0 ${valueMargin}` : `${valueMargin} 0`;\n          const negativeMarginstyles = {\n            margin\n          };\n\n          if (xy != null || x != null) {\n            negativeMarginstyles.width = `calc(100% + ${value}px)`;\n          }\n\n          if (media) {\n            if (!negativeMarginStyles) {\n              negativeMarginStyles = {};\n            }\n\n            negativeMarginStyles[theme.getBreakpoint(media)] = negativeMarginstyles;\n          } else {\n            negativeMarginStyles = negativeMarginstyles;\n          }\n        });\n        return negativeMarginStyles;\n      }, this.el.nativeElement, this._negativeMarginClass, STYLE_PRIORITY);\n    }\n    /**\n     * Defines the justify-content style property.\n     * Support breakpoints\n     */\n\n\n    get justify() {\n      return this._justify;\n    }\n\n    set justify(val) {\n      if (val !== this.justify) {\n        this._justify = val;\n        this._justifyClass = this.theme.addStyle(`lyGrid-justify:${val}`, theme => {\n          let justifyStyles;\n          eachMedia(val, (value, media) => {\n            const newJustifyStyles = {\n              justifyContent: value in ALIGN_ALIAS ? ALIGN_ALIAS[value] : value\n            };\n\n            if (media) {\n              if (!justifyStyles) {\n                justifyStyles = {};\n              }\n\n              justifyStyles[theme.getBreakpoint(media)] = newJustifyStyles;\n            } else {\n              justifyStyles = newJustifyStyles;\n            }\n          });\n          return justifyStyles;\n        }, this.el.nativeElement, this._justifyClass, STYLE_PRIORITY);\n      }\n    }\n    /**\n     * Defines the justify-content style property.\n     * Support breakpoints\n     */\n\n\n    get direction() {\n      return this._direction;\n    }\n\n    set direction(val) {\n      if (val !== this.direction) {\n        this._direction = val;\n        this._directionClass = this.theme.addStyle(`lyGrid-direction:${val}`, theme => {\n          let directionStyles;\n          eachMedia(val, (value, media) => {\n            const newDirectionStyles = {\n              flexDirection: value in ALIGN_ALIAS ? ALIGN_ALIAS[value] : value\n            };\n\n            if (media) {\n              if (!directionStyles) {\n                directionStyles = {};\n              }\n\n              directionStyles[theme.getBreakpoint(media)] = newDirectionStyles;\n            } else {\n              directionStyles = newDirectionStyles;\n            }\n          });\n          return directionStyles;\n        }, this.el.nativeElement, this._directionClass, STYLE_PRIORITY);\n      }\n    }\n    /**\n     * Defines the `align-items` style property.\n     * Support breakpoints\n     */\n\n\n    set alignItems(val) {\n      this._alignItems = val;\n      this._alignItemsClass = this.theme.addStyle(`lyGrid.align:${val}`, theme => {\n        let alignItemsStyles;\n        eachMedia(val, (value, media) => {\n          const newAlignItemsStyles = {\n            alignItems: value in ALIGN_ALIAS ? ALIGN_ALIAS[value] : value\n          };\n\n          if (media) {\n            if (!alignItemsStyles) {\n              alignItemsStyles = {};\n            }\n\n            alignItemsStyles[theme.getBreakpoint(media)] = newAlignItemsStyles;\n          } else {\n            alignItemsStyles = newAlignItemsStyles;\n          }\n        });\n        return alignItemsStyles;\n      }, this.el.nativeElement, this._alignItemsClass, STYLE_PRIORITY);\n    }\n\n    get alignItems() {\n      return this._alignItems;\n    }\n\n  }\n\n  LyGrid.и = 'LyGrid';\n\n  LyGrid.ɵfac = function LyGrid_Factory(t) {\n    return new (t || LyGrid)(i0.ɵɵdirectiveInject(i1.LyTheme2), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  LyGrid.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: LyGrid,\n    selectors: [[\"ly-grid\", \"container\", \"\"]],\n    inputs: {\n      spacingX: \"spacingX\",\n      spacingY: \"spacingY\",\n      spacing: \"spacing\",\n      justify: \"justify\",\n      direction: \"direction\",\n      alignItems: \"alignItems\"\n    }\n  });\n  return LyGrid;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet LyGridItem = /*#__PURE__*/(() => {\n  class LyGridItem {\n    constructor(gridContainer, el, renderer, theme, _sr) {\n      this.gridContainer = gridContainer;\n      this.el = el;\n      this.theme = theme;\n      this._sr = _sr;\n\n      if (!gridContainer) {\n        throw new Error(`Require parent <ly-grid container>`);\n      }\n\n      renderer.addClass(el.nativeElement, this.gridContainer.classes.item);\n    }\n    /**\n     * Defines the number of grids\n     * Support breakpoints\n     */\n\n\n    get col() {\n      return this._col;\n    }\n\n    set col(val) {\n      const newVal = this._col = val || 0;\n      this._colClass = this._sr.add(`${LyGridItem.и}--col-${newVal}`, theme => {\n        const medias = new StyleCollection();\n        eachMedia(newVal, (value, media) => {\n          if (typeof value === 'string') {\n            throw new Error(`${LyGridItem.и}: '${val}' is not valid.`);\n          }\n\n          const maxWidth = value ? value * 100 / 12 : 100;\n          const flexBasis = value ? value * 100 / 12 : 0;\n          const flexGrow = value ? 0 : 1;\n\n          if (media) {\n            medias.add(_className => `@media ${theme.breakpoints[media]}{${_className}{max-width:${maxWidth}%;flex-basis:${flexBasis}%;flex-grow:${flexGrow};}}`);\n          } else {\n            medias.add(_className => `${_className}{max-width:${maxWidth}%;flex-basis:${flexBasis}%;flex-grow:${flexGrow};}`);\n          }\n        });\n        return medias.css;\n      }, STYLE_PRIORITY, this._colClass);\n    }\n\n    set gridItemCol(val) {\n      this.col = val;\n    }\n\n    get gridItemCol() {\n      return this.col;\n    }\n    /**\n     * Defines the order style property.\n     * Support breakpoints\n     */\n\n\n    get order() {\n      return this._order;\n    }\n\n    set order(val) {\n      if (val !== this.order) {\n        this._order = val;\n        this._orderClass = this.theme.addStyle(`lyGrid-order:${val}`, theme => {\n          let orderStyles;\n          eachMedia(`${val}`, (value, media) => {\n            const newOrderStyles = {\n              order: value\n            };\n\n            if (media) {\n              if (!orderStyles) {\n                orderStyles = {};\n              }\n\n              orderStyles[theme.getBreakpoint(media)] = newOrderStyles;\n            } else {\n              orderStyles = newOrderStyles;\n            }\n          });\n          return orderStyles;\n        }, this.el.nativeElement, this._orderClass, STYLE_PRIORITY);\n      }\n    }\n\n    ngOnInit() {\n      this._updateSpacing();\n    }\n\n    _updateSpacing() {\n      if (this.gridContainer._spacingClass) {\n        this.el.nativeElement.classList.add(this.gridContainer._spacingClass);\n      } else {\n        if (this.gridContainer._spacingXClass) {\n          this.el.nativeElement.classList.add(this.gridContainer._spacingXClass);\n        }\n\n        if (this.gridContainer._spacingYClass) {\n          this.el.nativeElement.classList.add(this.gridContainer._spacingYClass);\n        }\n      }\n    }\n\n  }\n\n  LyGridItem.и = 'LyGridItem';\n\n  LyGridItem.ɵfac = function LyGridItem_Factory(t) {\n    return new (t || LyGridItem)(i0.ɵɵdirectiveInject(LyGrid), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.LyTheme2), i0.ɵɵdirectiveInject(i1.StyleRenderer));\n  };\n\n  LyGridItem.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: LyGridItem,\n    selectors: [[\"ly-grid\", \"item\", \"\"], [\"\", \"ly-grid-item\", \"\"], [\"\", \"lyGridItem\", \"\"]],\n    inputs: {\n      col: \"col\",\n      gridItemCol: [\"lyGridItem\", \"gridItemCol\"],\n      order: \"order\"\n    },\n    features: [i0.ɵɵProvidersFeature([StyleRenderer])]\n  });\n  return LyGridItem;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet LyGridModule = /*#__PURE__*/(() => {\n  class LyGridModule {}\n\n  LyGridModule.ɵfac = function LyGridModule_Factory(t) {\n    return new (t || LyGridModule)();\n  };\n\n  LyGridModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: LyGridModule\n  });\n  LyGridModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return LyGridModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { LyGrid, LyGridItem, LyGridModule, STYLES }; //# sourceMappingURL=alyle-ui-grid.mjs.map","map":null,"metadata":{},"sourceType":"module"}