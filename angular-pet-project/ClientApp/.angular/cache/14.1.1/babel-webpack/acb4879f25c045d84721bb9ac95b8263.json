{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Input, NgModule } from '@angular/core';\nimport * as i1 from '@alyle/ui';\nimport { st2c, StyleCollection, mixinStyleUpdater, mixinColor, toBoolean, StyleRenderer, LyCommonModule } from '@alyle/ui';\nconst STYLE_PRIORITY = -1;\n\nconst STYLES = theme => {\n  return {\n    $name: LyTypography.и,\n    $priority: STYLE_PRIORITY,\n    root: _className => `${_className}{margin:0;display:block;font-family:${theme.typography.fontFamily};}${st2c(theme.typography && theme.typography.root && (theme.typography.root instanceof StyleCollection ? theme.typography.root.setTransformer(fn => fn()).css : theme.typography.root()), `${_className}`)}`,\n    gutterTop: _className => `${_className}{margin-top:0.35em;}`,\n    gutterBottom: _className => `${_className}{margin-bottom:0.35em;}`,\n    gutter: _className => `${_className}{margin:0.35em 0;}`\n  };\n};\n/** @docs-private */\n\n\nclass LyTypographyBase {\n  constructor(_theme) {\n    this._theme = _theme;\n  }\n\n}\n/** @docs-private */\n\n\nconst LyTypographyMixinBase = mixinStyleUpdater(mixinColor(LyTypographyBase));\nlet LyTypography = /*#__PURE__*/(() => {\n  class LyTypography extends LyTypographyMixinBase {\n    constructor(_theme, _el, renderer, sRenderer) {\n      super(_theme);\n      this._el = _el;\n      this.renderer = renderer;\n      this.sRenderer = sRenderer;\n      /** @docs-private */\n\n      this.classes = this._theme.renderStyleSheet(STYLES);\n      this.renderer.addClass(this._el.nativeElement, this.classes.root);\n    }\n\n    set lyTyp(val) {\n      if (val !== this.lyTyp) {\n        if (val) {\n          this._lyTypClass = this._createTypClass(val, this._lyTypClass);\n        } else if (this._lyTypClass) {\n          this.renderer.removeClass(this._el.nativeElement, this._lyTypClass);\n          this._lyTypClass = null;\n        }\n      }\n    }\n\n    get lyTyp() {\n      return this._lyTyp;\n    }\n    /** The text will truncate with an ellipsis. */\n\n\n    set noWrap(val) {\n      const newValue = toBoolean(val);\n\n      if (newValue) {\n        this._noWrapClass = this._theme.addSimpleStyle('lyTyp.noWrap', {\n          overflow: 'hidden',\n          whiteSpace: 'nowrap',\n          textOverflow: 'ellipsis'\n        });\n        this.renderer.addClass(this._el.nativeElement, this._noWrapClass);\n      } else if (this._noWrapClass) {\n        this.renderer.removeClass(this._el.nativeElement, this._noWrapClass);\n        this._noWrapClass = undefined;\n      }\n    }\n\n    get noWrap() {\n      return this._noWrap;\n    }\n\n    set gutter(val) {\n      const newVal = toBoolean(val);\n\n      if (newVal !== this.gutter) {\n        this._gutter = newVal;\n        this.sRenderer.toggleClass(this.classes.gutter, newVal);\n      }\n    }\n\n    get gutter() {\n      return this._gutter;\n    }\n\n    set gutterTop(val) {\n      const newVal = toBoolean(val);\n\n      if (newVal !== this.gutterTop) {\n        this._gutterTop = newVal;\n        this.sRenderer.toggleClass(this.classes.gutterTop, newVal);\n      }\n    }\n\n    get gutterTop() {\n      return this._gutterTop;\n    }\n\n    set gutterBottom(val) {\n      const newVal = toBoolean(val);\n\n      if (newVal !== this.gutterBottom) {\n        this._gutterBottom = newVal;\n        this.sRenderer.toggleClass(this.classes.gutterBottom, newVal);\n      }\n    }\n\n    get gutterBottom() {\n      return this._gutterBottom;\n    }\n\n    ngOnInit() {\n      if (this.gutterTop && this.gutterBottom) {\n        throw new Error(`use '<element lyTyp gutter>' instead of '<element lyTyp gutterTop gutterBottom>'`);\n      }\n    }\n\n    ngOnChanges() {\n      this.updateStyle(this._el.nativeElement);\n    }\n\n    _createTypClass(val, instance) {\n      const newKey = `k-typ:${val}`;\n      return this.sRenderer.add(newKey, theme => {\n        if (theme.typography && theme.typography.lyTyp) {\n          const lyTyp = theme.typography.lyTyp[val];\n\n          if (lyTyp) {\n            return lyTyp instanceof StyleCollection ? lyTyp.setTransformer(_ => _()).css : lyTyp();\n          }\n        }\n\n        throw new Error(`Value typography.lyTyp['${val}'] not found in ThemeVariables`);\n      }, STYLE_PRIORITY, instance);\n    }\n\n  }\n\n  /** @docs-private */\n  LyTypography.и = 'LyTypography';\n\n  LyTypography.ɵfac = function LyTypography_Factory(t) {\n    return new (t || LyTypography)(i0.ɵɵdirectiveInject(i1.LyTheme2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.StyleRenderer));\n  };\n\n  LyTypography.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: LyTypography,\n    selectors: [[\"\", \"lyTyp\", \"\"]],\n    inputs: {\n      color: \"color\",\n      lyTyp: \"lyTyp\",\n      noWrap: \"noWrap\",\n      gutter: \"gutter\",\n      gutterTop: \"gutterTop\",\n      gutterBottom: \"gutterBottom\"\n    },\n    features: [i0.ɵɵProvidersFeature([StyleRenderer]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n  });\n  return LyTypography;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet LyTypographyModule = /*#__PURE__*/(() => {\n  class LyTypographyModule {}\n\n  LyTypographyModule.ɵfac = function LyTypographyModule_Factory(t) {\n    return new (t || LyTypographyModule)();\n  };\n\n  LyTypographyModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: LyTypographyModule\n  });\n  LyTypographyModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [LyCommonModule]\n  });\n  return LyTypographyModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { LyTypography, LyTypographyBase, LyTypographyMixinBase, LyTypographyModule, STYLES }; //# sourceMappingURL=alyle-ui-typography.mjs.map","map":null,"metadata":{},"sourceType":"module"}