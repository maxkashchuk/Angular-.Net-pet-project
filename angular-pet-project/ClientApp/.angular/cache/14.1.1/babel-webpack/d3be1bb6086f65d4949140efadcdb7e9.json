{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, TemplateRef, ViewContainerRef, Component, ChangeDetectionStrategy, ViewChild, Injector, Directive, NgModule } from '@angular/core';\nimport * as i1 from '@alyle/ui';\nimport { shadowBuilder, st2c, StyleCollection, StyleRenderer, STYLES_BACKDROP_DARK, createStyle, LyStyle, LyOverlayRef, LyCommonModule, LyOverlayModule } from '@alyle/ui';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { Subject } from 'rxjs';\nimport { _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport * as i2 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { ESCAPE } from '@angular/cdk/keycodes';\nimport { CommonModule } from '@angular/common';\n\nfunction LyDialogContainer_ng_template_0_Template(rf, ctx) {}\n\nlet LyDialogRef = /*#__PURE__*/(() => {\n  class LyDialogRef {\n    constructor(_overlayRef) {\n      this._overlayRef = _overlayRef;\n    }\n\n    get afterOpened() {\n      return this._overlayRef.componentRef.instance._afterOpened.asObservable();\n    }\n\n    get beforeClosed() {\n      return this._overlayRef.componentRef.instance._beforeClosed.asObservable();\n    }\n\n    get afterClosed() {\n      return this._overlayRef.componentRef.instance._afterClosed.asObservable();\n    }\n    /**\n     * @internal\n     * @docs-private\n     */\n\n\n    get result() {\n      return this._result;\n    }\n\n    close(result) {\n      const dialogContainer = this._overlayRef.componentRef.instance;\n\n      dialogContainer._beforeClosed.next(result);\n\n      dialogContainer._beforeClosed.complete();\n\n      dialogContainer._startClose();\n\n      this._result = result;\n    }\n\n  }\n\n  LyDialogRef.ɵfac = function LyDialogRef_Factory(t) {\n    return new (t || LyDialogRef)(i0.ɵɵinject(i1.LyOverlayRef));\n  };\n\n  LyDialogRef.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: LyDialogRef,\n    factory: LyDialogRef.ɵfac\n  });\n  return LyDialogRef;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Configuration for opening a modal dialog with the LyDialog service.\n */\n\n\nclass LyDialogConfig {\n  constructor() {\n    /**\n     * Max-height of the dialog container. If a number is provided, pixel units are assumed.\n     * Defaults to `['calc(100vw - 90px)']`\n     * Support beakpoints\n     */\n    this.maxHeight = ['calc(100vh - 64px)'];\n    /**\n     * Max-width of the dialog container. If a number is provided, pixel units are assumed.\n     * Defaults to `['calc(100vw - 90px)']`\n     * Support beakpoints\n     */\n\n    this.maxWidth = ['calc(100vw - 64px)'];\n    /** Whether the dialog has a backdrop. */\n\n    this.hasBackdrop = true;\n  }\n\n}\n\nconst LY_DIALOG_DATA = new InjectionToken('LyDialogData');\nconst STYLE_PRIORITY$3 = -2;\n/** @docs-private */\n\nconst STYLES = (theme, ref) => {\n  const dialog = ref.selectorsOf(STYLES);\n  return {\n    root: () => _className => `${_className}{display:flex;position:relative;background-color:${theme.background.primary.default};border-radius:4px;box-shadow:${shadowBuilder(12)};overflow:auto;pointer-events:auto;}${_className} > :first-child{display:flex;flex-direction:column;width:100%;}${st2c(theme.dialog && theme.dialog.root && (theme.dialog.root instanceof StyleCollection ? theme.dialog.root.setTransformer(fn => fn(dialog)) : theme.dialog.root(dialog)), `${_className}`)}`\n  };\n};\n/** @docs-private */\n\n\nlet LyDialogContainer = /*#__PURE__*/(() => {\n  class LyDialogContainer {\n    constructor(sRenderer, _appRef, _overlayRef, _theme, _el, _cd, _renderer, _trapFactory) {\n      this.sRenderer = sRenderer;\n      this._appRef = _appRef;\n      this._overlayRef = _overlayRef;\n      this._theme = _theme;\n      this._el = _el;\n      this._cd = _cd;\n      this._renderer = _renderer;\n      this._trapFactory = _trapFactory;\n      /** @docs-private */\n\n      this.classes = this._theme.addStyleSheet(STYLES, STYLE_PRIORITY$3);\n      /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n\n      this._previouslyFocusedElement = null;\n      /** @internal */\n\n      this._afterOpened = new Subject();\n      /** @internal */\n\n      this._beforeClosed = new Subject();\n      /** @internal */\n\n      this._afterClosed = new Subject();\n      /**\n       * State of the dialog animation.\n       * @internal\n       */\n\n      this._state = 'enter';\n\n      _renderer.addClass(_el.nativeElement, this.classes.root);\n    }\n\n    ngOnInit() {\n      if (this._componentFactoryOrTemplate instanceof TemplateRef) {\n        const context = new LyDialogContext(this._newInjector);\n        this._embeddedViewRef = this.viewContainerRef.createEmbeddedView(this._componentFactoryOrTemplate, context);\n      } else {\n        this._componentRef = this.viewContainerRef.createComponent(this._componentFactoryOrTemplate, undefined, this._newInjector);\n      } // If exist dialogStyleBlock apply for this component, else do nothing.\n\n\n      const {\n        containerClass\n      } = this._newInjector.get(LyDialogConfig);\n\n      if (containerClass) {\n        this._renderer.addClass(this._el.nativeElement, containerClass);\n      }\n    }\n\n    ngAfterContentInit() {\n      this._focusTrap = this._trapFactory.create(this._el.nativeElement);\n\n      this._captureFocus();\n    }\n\n    ngOnDestroy() {\n      this._focusTrap.destroy();\n\n      if (this._previouslyFocusedElement) {\n        this._previouslyFocusedElement.focus();\n\n        this._previouslyFocusedElement = null;\n      }\n    }\n    /** @internal */\n\n\n    _init(componentFactoryOrTemplate, newInjector) {\n      this._componentFactoryOrTemplate = componentFactoryOrTemplate;\n      this._newInjector = newInjector;\n    }\n    /**\n     * Start to close, starts the dialog exit animation.\n     * @internal\n     */\n\n\n    _startClose() {\n      this._state = 'exit';\n\n      this._cd.markForCheck();\n    }\n\n    _onAnimationStart(event) {\n      if (event.toState === 'enter') {\n        this._overlayRef.onResizeScroll();\n      }\n    }\n    /** @internal */\n\n\n    _onAnimationDone(event) {\n      if (event.toState === 'exit') {\n        const dialogRef = this._newInjector.get(LyDialogRef);\n\n        this._destroy();\n\n        this._overlayRef.destroy();\n\n        this._afterClosed.next(dialogRef.result);\n\n        this._afterClosed.complete();\n      } else if (event.toState === 'enter') {\n        this._afterOpened.next();\n\n        this._afterOpened.complete();\n      }\n    }\n\n    _destroy() {\n      if (this._componentRef) {\n        this._appRef.detachView(this._componentRef.hostView);\n\n        this._componentRef.destroy();\n      } else {\n        this._appRef.detachView(this._embeddedViewRef);\n\n        this._embeddedViewRef.detach();\n\n        this._embeddedViewRef.destroy();\n      }\n    }\n    /** @internal */\n\n\n    _getHostElement() {\n      return this._el.nativeElement;\n    }\n\n    _captureFocus() {\n      this._previouslyFocusedElement = _getFocusedElementPierceShadowDom();\n\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n\n  }\n\n  LyDialogContainer.ɵfac = function LyDialogContainer_Factory(t) {\n    return new (t || LyDialogContainer)(i0.ɵɵdirectiveInject(i1.StyleRenderer), i0.ɵɵdirectiveInject(i0.ApplicationRef), i0.ɵɵdirectiveInject(i1.LyOverlayRef), i0.ɵɵdirectiveInject(i1.LyTheme2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.FocusTrapFactory));\n  };\n\n  LyDialogContainer.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: LyDialogContainer,\n    selectors: [[\"ly-dialog-container\"]],\n    viewQuery: function LyDialogContainer_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(TemplateRef, 7, ViewContainerRef);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.viewContainerRef = _t.first);\n      }\n    },\n    hostVars: 1,\n    hostBindings: function LyDialogContainer_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵsyntheticHostListener(\"@dialogContainer.start\", function LyDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) {\n          return ctx._onAnimationStart($event);\n        })(\"@dialogContainer.done\", function LyDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) {\n          return ctx._onAnimationDone($event);\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵsyntheticHostProperty(\"@dialogContainer\", ctx._state);\n      }\n    },\n    features: [i0.ɵɵProvidersFeature([StyleRenderer])],\n    decls: 1,\n    vars: 0,\n    template: function LyDialogContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, LyDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\");\n      }\n    },\n    encapsulation: 2,\n    data: {\n      animation: [trigger('dialogContainer', [state('void, exit', style({\n        opacity: 0,\n        transform: 'scale(0.7)'\n      })), state('enter', style({\n        transform: 'none'\n      })), transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({\n        transform: 'none',\n        opacity: 1\n      }))), transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({\n        opacity: 0\n      })))])]\n    },\n    changeDetection: 0\n  });\n  return LyDialogContainer;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nclass LyDialogContext {\n  constructor(_injector) {\n    this._injector = _injector;\n    this.$implicit = this._injector.get(LyDialogRef);\n    this.dialogRef = this._injector.get(LyDialogRef);\n  }\n\n  get data() {\n    return this._injector.get(LY_DIALOG_DATA);\n  }\n\n}\n\nclass DynamicInjector {\n  constructor(_newInjector, _parentInjector) {\n    this._newInjector = _newInjector;\n    this._parentInjector = _parentInjector;\n  }\n\n  get(token, notFoundValue, _flags) {\n    const value = this._newInjector.get(token, notFoundValue);\n\n    if (value) {\n      return value;\n    }\n\n    return this._parentInjector.get(token, notFoundValue);\n  }\n\n}\n\nconst dialogContainerStyleProperties = ['width', 'maxWidth', 'minWidth', 'height', 'maxHeight', 'minHeight'];\nlet LyDialog = /*#__PURE__*/(() => {\n  class LyDialog {\n    constructor(_overlay, _componentFactoryResolver, _theme, _injector) {\n      this._overlay = _overlay;\n      this._componentFactoryResolver = _componentFactoryResolver;\n      this._theme = _theme;\n      this._injector = _injector;\n    }\n\n    open(componentOrTemplateRef, config) {\n      // merge with default config\n      config = Object.assign(Object.assign({}, new LyDialogConfig()), config);\n      let componentFactoryOrTemplate;\n\n      if (componentOrTemplateRef instanceof TemplateRef) {\n        componentFactoryOrTemplate = componentOrTemplateRef;\n      } else {\n        componentFactoryOrTemplate = this._componentFactoryResolver.resolveComponentFactory(componentOrTemplateRef);\n      }\n\n      const noop = () => {};\n\n      const overlayRef = this._overlay.create(LyDialogContainer, null, {\n        styles: {\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0\n        },\n        hasBackdrop: config.hasBackdrop,\n        onResizeScroll: noop,\n        disableClose: config.disableClose,\n        backdropClass: config.backdropClass || this._theme.style(STYLES_BACKDROP_DARK),\n        fnDestroy: () => {\n          dialogRef.close();\n          keydownEventsSuscription.unsubscribe();\n        }\n      });\n\n      const keydownEvents = overlayRef.keydownEvents();\n      const keydownEventsSuscription = keydownEvents.subscribe(event => {\n        if (!(config === null || config === void 0 ? void 0 : config.disableClose) && event.keyCode === ESCAPE) {\n          dialogRef.close();\n        }\n      });\n      const instance = overlayRef.componentRef.instance;\n      dialogContainerStyleProperties.forEach(property => {\n        if (config[property]) {\n          createStyle(instance, {\n            key: property,\n            и: LyStyle.и\n          }, config[property], LyStyle[property], LyStyle.$priority);\n        }\n      });\n      const providers = [{\n        provide: LyDialogRef,\n        useValue: new LyDialogRef(overlayRef.componentRef.injector.get(LyOverlayRef))\n      }, {\n        provide: LyDialogConfig,\n        useValue: config\n      }];\n\n      if (config.data != null) {\n        providers.push({\n          provide: LY_DIALOG_DATA,\n          useValue: config.data\n        });\n      }\n\n      const newInjector = new DynamicInjector(Injector.create(providers, overlayRef.componentRef.injector), this._injector);\n\n      instance._init(componentFactoryOrTemplate, newInjector);\n\n      const dialogRef = newInjector.get(LyDialogRef);\n      return dialogRef;\n    }\n\n  }\n\n  LyDialog.ɵfac = function LyDialog_Factory(t) {\n    return new (t || LyDialog)(i0.ɵɵinject(i1.LyOverlay), i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i1.LyTheme2), i0.ɵɵinject(i0.Injector));\n  };\n\n  LyDialog.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: LyDialog,\n    factory: LyDialog.ɵfac\n  });\n  return LyDialog;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** @docs-private */\n\n\nconst STYLE_PRIORITY$2 = -2;\n/** @docs-private */\n\nconst STYLES_DIALOG_TITLE = theme => _className => `${_className}{display:block;flex:0 0 auto;margin:20px 0 16px;padding:0 24px;font-size:20px;line-height:24px;font-weight:500;font-family:${theme.typography.fontFamily};}`;\n\nlet LyDialogTitle = /*#__PURE__*/(() => {\n  class LyDialogTitle {\n    constructor(_renderer, _el, _theme) {\n      this._renderer = _renderer;\n      this._el = _el;\n      this._theme = _theme;\n    }\n\n    ngOnInit() {\n      this._renderer.addClass(this._el.nativeElement, this._theme.renderStyle(STYLES_DIALOG_TITLE, STYLE_PRIORITY$2));\n    }\n\n  }\n\n  LyDialogTitle.ɵfac = function LyDialogTitle_Factory(t) {\n    return new (t || LyDialogTitle)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.LyTheme2));\n  };\n\n  LyDialogTitle.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: LyDialogTitle,\n    selectors: [[\"\", \"ly-dialog-title\", \"\"], [\"\", \"lyDialogTitle\", \"\"]],\n    exportAs: [\"lyDialogTitle\"]\n  });\n  return LyDialogTitle;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** @docs-private */\n\n\nconst STYLE_PRIORITY$1 = -2;\n/** @docs-private */\n\nconst STYLES_DIALOG_CONTENT = () => _className => `${_className}{display:block;overflow-y:auto;flex:1 1 auto;padding:0 24px 24px;-webkit-overflow-scrolling:touch;}`;\n\nlet LyDialogContent = /*#__PURE__*/(() => {\n  class LyDialogContent {\n    constructor(_renderer, _el, _theme) {\n      this._renderer = _renderer;\n      this._el = _el;\n      this._theme = _theme;\n    }\n\n    ngOnInit() {\n      this._renderer.addClass(this._el.nativeElement, this._theme.renderStyle(STYLES_DIALOG_CONTENT, STYLE_PRIORITY$1));\n    }\n\n  }\n\n  LyDialogContent.ɵfac = function LyDialogContent_Factory(t) {\n    return new (t || LyDialogContent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.LyTheme2));\n  };\n\n  LyDialogContent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: LyDialogContent,\n    selectors: [[\"ly-dialog-content\"], [\"\", \"ly-dialog-content\", \"\"], [\"\", \"lyDialogContent\", \"\"]],\n    exportAs: [\"lyDialogContent\"]\n  });\n  return LyDialogContent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** @docs-private */\n\n\nconst STYLE_PRIORITY = -2;\n/** @docs-private */\n\nconst STYLES_DIALOG_ACTIONS = () => _className => `${_className}{display:flex;flex:0 0 auto;padding:8px;flex-wrap:wrap;min-height:52px;align-items:center;}`;\n\nlet LyDialogActions = /*#__PURE__*/(() => {\n  class LyDialogActions {\n    constructor(_renderer, _el, _theme) {\n      this._renderer = _renderer;\n      this._el = _el;\n      this._theme = _theme;\n    }\n\n    ngOnInit() {\n      this._renderer.addClass(this._el.nativeElement, this._theme.renderStyle(STYLES_DIALOG_ACTIONS, STYLE_PRIORITY));\n    }\n\n  }\n\n  LyDialogActions.ɵfac = function LyDialogActions_Factory(t) {\n    return new (t || LyDialogActions)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.LyTheme2));\n  };\n\n  LyDialogActions.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: LyDialogActions,\n    selectors: [[\"ly-dialog-actions\"], [\"\", \"ly-dialog-actions\", \"\"], [\"\", \"lyDialogActions\", \"\"]],\n    exportAs: [\"lyDialogActions\"]\n  });\n  return LyDialogActions;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet LyDialogModule = /*#__PURE__*/(() => {\n  class LyDialogModule {}\n\n  LyDialogModule.ɵfac = function LyDialogModule_Factory(t) {\n    return new (t || LyDialogModule)();\n  };\n\n  LyDialogModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: LyDialogModule\n  });\n  LyDialogModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [LyDialog],\n    imports: [[CommonModule, LyCommonModule, LyOverlayModule, A11yModule], LyCommonModule]\n  });\n  return LyDialogModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { LY_DIALOG_DATA, LyDialog, LyDialogActions, LyDialogContainer, LyDialogContent, LyDialogContext, LyDialogModule, LyDialogRef, LyDialogTitle }; //# sourceMappingURL=alyle-ui-dialog.mjs.map","map":null,"metadata":{},"sourceType":"module"}