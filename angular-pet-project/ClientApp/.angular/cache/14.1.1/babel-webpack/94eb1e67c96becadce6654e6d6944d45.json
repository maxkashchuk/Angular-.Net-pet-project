{"ast":null,"code":"import { lyl, StyleRenderer, ThemeVariables, ThemeRef } from '@alyle/ui';\nimport { STYLES as CROPPER_STYLES, LyImageCropper, ImgCropperConfig } from '@alyle/ui/image-cropper';\nimport { Platform } from '@angular/cdk/platform';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@alyle/ui\";\nimport * as i2 from \"@angular/cdk/platform\";\nimport * as i3 from \"@angular/material/button\";\nimport * as i4 from \"@angular/material/dialog\";\n\nconst STYLES = (_theme, ref) => {\n  ref.renderStyleSheet(CROPPER_STYLES);\n  const cropper = ref.selectorsOf(CROPPER_STYLES);\n  return {\n    root: lyl`{\n      ${cropper.root} {\n        max-width: 400px\n        height: 300px\n      }\n    }`,\n    sliderContainer: lyl`{\n      text-align: center\n      max-width: 400px\n      margin: 14px\n    }`,\n    cropResult: lyl`{\n      border-radius: 50%\n    }`\n  };\n};\n\nexport let CropperDialogComponent = /*#__PURE__*/(() => {\n  class CropperDialogComponent {\n    constructor(sRenderer, _platform) {\n      this.sRenderer = sRenderer;\n      this._platform = _platform;\n      this.classes = this.sRenderer.renderSheet(STYLES, 'root');\n      this.myConfig = {\n        width: 150,\n        height: 150,\n        fill: '#ff2997',\n        type: 'image/png',\n        round: true\n      };\n    }\n\n    ngOnInit() {}\n\n  }\n\n  CropperDialogComponent.ɵfac = function CropperDialogComponent_Factory(t) {\n    return new (t || CropperDialogComponent)(i0.ɵɵdirectiveInject(i1.StyleRenderer), i0.ɵɵdirectiveInject(i2.Platform));\n  };\n\n  CropperDialogComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CropperDialogComponent,\n    selectors: [[\"app-cropper-dialog\"]],\n    viewQuery: function CropperDialogComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(LyImageCropper, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.cropper = _t.first);\n      }\n    },\n    decls: 68,\n    vars: 0,\n    consts: [[\"mat-dialog-title\", \"\"], [\"mat-button\", \"\", \"mat-dialog-close\", \"\"]],\n    template: function CropperDialogComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h2\", 0);\n        i0.ɵɵtext(1, \"Install Angular\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(2, \"\\n\");\n        i0.ɵɵelementStart(3, \"div\");\n        i0.ɵɵtext(4, \"\\n  \");\n        i0.ɵɵelementStart(5, \"h3\");\n        i0.ɵɵtext(6, \"Develop across all platforms\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(7, \"\\n  \");\n        i0.ɵɵelementStart(8, \"p\");\n        i0.ɵɵtext(9, \"Learn one way to build applications with Angular and reuse your code and abilities to build\\n    apps for any deployment target. For web, mobile web, native mobile and native desktop.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(10, \"\\n\\n  \");\n        i0.ɵɵelementStart(11, \"h3\");\n        i0.ɵɵtext(12, \"Speed & Performance\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(13, \"\\n  \");\n        i0.ɵɵelementStart(14, \"p\");\n        i0.ɵɵtext(15, \"Achieve the maximum speed possible on the Web Platform today, and take it further, via Web\\n    Workers and server-side rendering. Angular puts you in control over scalability. Meet huge\\n    data requirements by building data models on RxJS, Immutable.js or another push-model.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(16, \"\\n\\n  \");\n        i0.ɵɵelementStart(17, \"h3\");\n        i0.ɵɵtext(18, \"Incredible tooling\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(19, \"\\n  \");\n        i0.ɵɵelementStart(20, \"p\");\n        i0.ɵɵtext(21, \"Build features quickly with simple, declarative templates. Extend the template language with\\n    your own components and use a wide array of existing components. Get immediate Angular-specific\\n    help and feedback with nearly every IDE and editor. All this comes together so you can focus\\n    on building amazing apps rather than trying to make the code work.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(22, \"\\n\\n  \");\n        i0.ɵɵelementStart(23, \"h3\");\n        i0.ɵɵtext(24, \"Loved by millions\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(25, \"\\n  \");\n        i0.ɵɵelementStart(26, \"p\");\n        i0.ɵɵtext(27, \"From prototype through global deployment, Angular delivers the productivity and scalable\\n    infrastructure that supports Google's largest applications.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(28, \"\\n\\n  \");\n        i0.ɵɵelementStart(29, \"h3\");\n        i0.ɵɵtext(30, \"What is Angular?\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(31, \"\\n\\n  \");\n        i0.ɵɵelementStart(32, \"p\");\n        i0.ɵɵtext(33, \"Angular is a platform that makes it easy to build applications with the web. Angular\\n    combines declarative templates, dependency injection, end to end tooling, and integrated\\n    best practices to solve development challenges. Angular empowers developers to build\\n    applications that live on the web, mobile, or the desktop\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(34, \"\\n\\n  \");\n        i0.ɵɵelementStart(35, \"h3\");\n        i0.ɵɵtext(36, \"Architecture overview\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(37, \"\\n\\n  \");\n        i0.ɵɵelementStart(38, \"p\");\n        i0.ɵɵtext(39, \"Angular is a platform and framework for building client applications in HTML and TypeScript.\\n  Angular is itself written in TypeScript. It implements core and optional functionality as a\\n  set of TypeScript libraries that you import into your apps.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(40, \"\\n\\n  \");\n        i0.ɵɵelementStart(41, \"p\");\n        i0.ɵɵtext(42, \"The basic building blocks of an Angular application are NgModules, which provide a compilation\\n  context for components. NgModules collect related code into functional sets; an Angular app is\\n  defined by a set of NgModules. An app always has at least a root module that enables\\n  bootstrapping, and typically has many more feature modules.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(43, \"\\n\\n  \");\n        i0.ɵɵelementStart(44, \"p\");\n        i0.ɵɵtext(45, \"Components define views, which are sets of screen elements that Angular can choose among and\\n  modify according to your program logic and data. Every app has at least a root component.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(46, \"\\n\\n  \");\n        i0.ɵɵelementStart(47, \"p\");\n        i0.ɵɵtext(48, \"Components use services, which provide specific functionality not directly related to views.\\n  Service providers can be injected into components as dependencies, making your code modular,\\n  reusable, and efficient.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(49, \"\\n\\n  \");\n        i0.ɵɵelementStart(50, \"p\");\n        i0.ɵɵtext(51, \"Both components and services are simply classes, with decorators that mark their type and\\n  provide metadata that tells Angular how to use them.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(52, \"\\n\\n  \");\n        i0.ɵɵelementStart(53, \"p\");\n        i0.ɵɵtext(54, \"The metadata for a component class associates it with a template that defines a view. A\\n  template combines ordinary HTML with Angular directives and binding markup that allow Angular\\n  to modify the HTML before rendering it for display.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(55, \"\\n\\n  \");\n        i0.ɵɵelementStart(56, \"p\");\n        i0.ɵɵtext(57, \"The metadata for a service class provides the information Angular needs to make it available\\n  to components through Dependency Injection (DI).\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(58, \"\\n\\n  \");\n        i0.ɵɵelementStart(59, \"p\");\n        i0.ɵɵtext(60, \"An app's components typically define many views, arranged hierarchically. Angular provides\\n  the Router service to help you define navigation paths among views. The router provides\\n  sophisticated in-browser navigational capabilities.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(61, \"\\n  \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(62, \"\\n\");\n        i0.ɵɵelementStart(63, \"div\");\n        i0.ɵɵtext(64, \"\\n  \");\n        i0.ɵɵelementStart(65, \"button\", 1);\n        i0.ɵɵtext(66, \"Cancel\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(67, \"\\n\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    dependencies: [i3.MatButton, i4.MatDialogClose, i4.MatDialogTitle]\n  });\n  return CropperDialogComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}