{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Component, ChangeDetectionStrategy, Optional, Inject, ViewChild, Input, NgModule } from '@angular/core';\nimport * as i1 from '@alyle/ui';\nimport { st2c, LY_COMMON_STYLES, StyleCollection, mixinStyleUpdater, mixinBg, mixinColor, mixinRaised, mixinDisabled, mixinOutlined, mixinElevation, mixinShadowColor, mixinDisableRipple, getLyThemeVariableUndefinedError, toBoolean, StyleRenderer, LyCommonModule } from '@alyle/ui';\nimport { Color } from '@alyle/ui/color';\nimport * as i2 from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/platform';\nconst _c0 = [\"rippleContainer\"];\nconst _c1 = [\"ly-button\", \"\"];\nconst _c2 = [\"*\"];\nconst DEFAULT_DISABLE_RIPPLE = false;\nconst DEFAULT_SIZE = 'medium';\nconst STYLE_PRIORITY = -2;\nconst LY_BUTTON_DEFAULT_OPTIONS = new InjectionToken('LY_BUTTON_DEFAULT_OPTIONS');\n\nconst STYLES = (theme, ref) => {\n  const typography = theme.typography;\n  const button = ref.selectorsOf(STYLES);\n  return {\n    $priority: STYLE_PRIORITY,\n    $name: LyButton.и,\n    root: () => _className => {\n      var _a;\n\n      return `${_className}{font-family:${typography.fontFamily};color:${theme.text.default};-webkit-tap-highlight-color:transparent;background-color:${new Color(0, 0, 0, 0)};border:0;padding:0 1em;-moz-appearance:none;margin:0;border-radius:3px;outline:none;font-weight:500;box-sizing:border-box;position:relative;justify-content:center;align-items:center;align-content:center;display:inline-flex;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;text-decoration-line:none;-webkit-text-decoration-line:none;font-size:${theme.pxToRem(14)};}${_className}::-moz-focus-inner{border:0;}${_className}::before{content:'';}${st2c(LY_COMMON_STYLES.fill, `${_className}::before`)}${_className}::before{width:100%;height:100%;background:transparent;opacity:0;pointer-events:none;}${_className}.cdk-keyboard-focused::before,${_className}.cdk-program-focused::before,${_className}:hover::before{background:currentColor;opacity:.13;border-radius:inherit;}${st2c(((_a = theme.button) === null || _a === void 0 ? void 0 : _a.root) && (theme.button.root instanceof StyleCollection ? theme.button.root.setTransformer(fn => fn(button)).css : theme.button.root(button)), `${_className}`)}`;\n    },\n    content: _className => `${_className}{padding:0;display:flex;justify-content:inherit;align-items:inherit;align-content:inherit;width:100%;height:100%;box-sizing:border-box;}`,\n    animations: _className => `${_className}:hover,${_className}:hover::before,${_className}:focus,${_className}:focus::before{transition:background 375ms cubic-bezier(0.23,1,0.32,1) 0ms,box-shadow 280ms cubic-bezier(.4,0,.2,1) 0ms;}`\n  };\n};\n/** @docs-private */\n\n\nclass LyButtonBase {\n  constructor(_theme, _ngZone, _platform) {\n    this._theme = _theme;\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n  }\n\n}\n/** @docs-private */\n\n\nconst LyButtonMixinBase = mixinStyleUpdater(mixinBg(mixinColor(mixinRaised(mixinDisabled(mixinOutlined(mixinElevation(mixinShadowColor(mixinDisableRipple(LyButtonBase)))))))));\nlet LyButton = /*#__PURE__*/(() => {\n  class LyButton extends LyButtonMixinBase {\n    constructor(_el, _renderer, _theme, _ngZone, _rippleService, _focusMonitor, sRenderer, platform, _defaultConfig) {\n      super(_theme, _ngZone, platform);\n      this._el = _el;\n      this._renderer = _renderer;\n      this._rippleService = _rippleService;\n      this._focusMonitor = _focusMonitor;\n      this.sRenderer = sRenderer;\n      this._defaultConfig = _defaultConfig;\n      /**\n       * Style\n       * @docs-private\n       */\n\n      this.classes = this.sRenderer.renderSheet(STYLES);\n      this._rippleSensitive = false;\n      this.setAutoContrast();\n      this._triggerElement = _el;\n\n      this._renderer.addClass(this._el.nativeElement, this.classes.animations);\n\n      if (!_theme.variables.button) {\n        throw getLyThemeVariableUndefinedError('button');\n      }\n    }\n    /** @docs-private */\n\n\n    get rippleSensitive() {\n      return this._rippleSensitive;\n    }\n\n    set rippleSensitive(value) {\n      const newVal = this._rippleSensitive = toBoolean(value);\n      this._rippleConfig.sensitive = newVal;\n    }\n    /** Button size */\n\n\n    get size() {\n      return this._size;\n    }\n\n    set size(val) {\n      if (val !== this.size) {\n        this._size = val;\n\n        const newClass = this._theme.renderStyle(`${LyButton.и}--${val}-size`, (theme, ref) => {\n          if (theme.button && theme.button.size && theme.button.size[val]) {\n            return theme.button.size[val](ref.selectorsOf(STYLES));\n          }\n\n          throw new Error(`Value button.size['${val}'] not found in ThemeVariables`);\n        }, STYLE_PRIORITY);\n\n        this._sizeClass = this.sRenderer.updateClass(newClass, this._sizeClass);\n      }\n    }\n    /** Button appearance */\n\n\n    get appearance() {\n      return this._appearance;\n    }\n\n    set appearance(val) {\n      if (val !== this.appearance) {\n        if (val === 'icon' && !this._rippleConfig.centered) {\n          this._rippleConfig.centered = true;\n        }\n\n        this._appearance = val;\n\n        const newClass = this._theme.renderStyle(`${LyButton.и}--${val}-appearance`, (theme, ref) => {\n          if (!(theme.button.appearance && theme.button.appearance[val])) {\n            throw new Error(`Value button.appearance['${val}'] not found in ThemeVariables`);\n          }\n\n          return theme.button.appearance[val](ref.selectorsOf(STYLES));\n        }, STYLE_PRIORITY + 1);\n\n        this._appearanceClass = this.sRenderer.updateClass(newClass, this._appearanceClass);\n      }\n    }\n    /** @docs-private */\n\n\n    get hostElement() {\n      return this._el.nativeElement;\n    }\n\n    ngOnChanges() {\n      this.updateStyle(this._el);\n      const isDisabled = this.disabled;\n\n      this._renderer.setProperty(this._el.nativeElement, 'disabled', isDisabled);\n    }\n\n    ngOnInit() {\n      const {\n        button\n      } = this._theme.variables;\n\n      if (button) {\n        this._renderer.addClass(this._el.nativeElement, this.classes.root);\n\n        if (this.size == null && this.appearance == null) {\n          // Apply default config\n          this.size = this._defaultConfig && this._defaultConfig.size || DEFAULT_SIZE;\n        } else {\n          if (this._defaultConfig && this._defaultConfig.appearance) {\n            if (this.appearance == null) {\n              this.appearance = this._defaultConfig.appearance;\n            }\n          }\n        }\n      } // set default disable ripple\n\n\n      if (this.disableRipple == null) {\n        this.disableRipple = DEFAULT_DISABLE_RIPPLE;\n      }\n    }\n\n    ngAfterViewInit() {\n      this._focusMonitor.monitor(this._el, true);\n    }\n\n    ngOnDestroy() {\n      this._focusMonitor.stopMonitoring(this._el);\n\n      this._removeRippleEvents();\n    }\n    /** Focuses the button. */\n\n\n    focus(origin, options) {\n      if (origin) {\n        this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n      } else {\n        this._getHostElement().focus(options);\n      }\n    }\n\n    _getHostElement() {\n      return this._el.nativeElement;\n    }\n\n  }\n\n  LyButton.и = 'LyButton';\n\n  LyButton.ɵfac = function LyButton_Factory(t) {\n    return new (t || LyButton)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.LyTheme2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.LyRippleService), i0.ɵɵdirectiveInject(i2.FocusMonitor), i0.ɵɵdirectiveInject(i1.StyleRenderer), i0.ɵɵdirectiveInject(i3.Platform), i0.ɵɵdirectiveInject(LY_BUTTON_DEFAULT_OPTIONS, 8));\n  };\n\n  LyButton.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: LyButton,\n    selectors: [[\"button\", \"ly-button\", \"\"], [\"a\", \"ly-button\", \"\"]],\n    viewQuery: function LyButton_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._rippleContainer = _t.first);\n      }\n    },\n    inputs: {\n      bg: \"bg\",\n      color: \"color\",\n      raised: \"raised\",\n      disabled: \"disabled\",\n      outlined: \"outlined\",\n      elevation: \"elevation\",\n      shadowColor: \"shadowColor\",\n      disableRipple: \"disableRipple\",\n      rippleSensitive: [\"sensitive\", \"rippleSensitive\"],\n      size: \"size\",\n      appearance: \"appearance\"\n    },\n    exportAs: [\"lyButton\"],\n    features: [i0.ɵɵProvidersFeature([StyleRenderer]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    attrs: _c1,\n    ngContentSelectors: _c2,\n    decls: 4,\n    vars: 2,\n    consts: [[3, \"className\"], [\"rippleContainer\", \"\"]],\n    template: function LyButton_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"span\", 0);\n        i0.ɵɵprojection(1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(2, \"div\", 0, 1);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"className\", ctx.classes.content);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"className\", ctx._rippleService.classes.container);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return LyButton;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet LyButtonModule = /*#__PURE__*/(() => {\n  class LyButtonModule {}\n\n  LyButtonModule.ɵfac = function LyButtonModule_Factory(t) {\n    return new (t || LyButtonModule)();\n  };\n\n  LyButtonModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: LyButtonModule\n  });\n  LyButtonModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [LyCommonModule]\n  });\n  return LyButtonModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { LY_BUTTON_DEFAULT_OPTIONS, LyButton, LyButtonBase, LyButtonMixinBase, LyButtonModule, STYLES }; //# sourceMappingURL=alyle-ui-button.mjs.map","map":null,"metadata":{},"sourceType":"module"}