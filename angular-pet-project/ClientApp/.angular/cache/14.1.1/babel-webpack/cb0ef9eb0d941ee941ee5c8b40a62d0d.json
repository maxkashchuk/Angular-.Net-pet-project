{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { SecurityContext, Injectable, Optional, Inject, Directive, Input, NgModule } from '@angular/core';\nimport * as i2$1 from '@alyle/ui';\nimport { keyframesUniqueId, mixinStyleUpdater, mixinBg, mixinColor, mixinRaised, mixinOutlined, mixinElevation, mixinShadowColor, StyleRenderer, LyCommonModule } from '@alyle/ui';\nimport { share, map, take } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/common/http';\nimport * as i2 from '@angular/platform-browser';\nimport * as i3 from '@angular/cdk/platform';\nconst STYLE_PRIORITY$1 = -2;\n/** The following styles will never be updated */\n\nconst styles = {\n  svg: {\n    width: 'inherit',\n    height: 'inherit',\n    fill: 'currentColor'\n  }\n};\nlet LyIconService = /*#__PURE__*/(() => {\n  class LyIconService {\n    constructor(http, _sanitizer, _document, theme) {\n      this.http = http;\n      this._sanitizer = _sanitizer;\n      this._document = _document;\n      this.theme = theme;\n      this._defaultClass = 'material-icons';\n      this.svgMap = new Map();\n      this._fontClasses = new Map();\n      /**\n       * Styles\n       * @docs-private\n       */\n\n      this.classes = this.theme.addStyleSheet(styles, STYLE_PRIORITY$1);\n      this.defaultSvgIcon = '<svg viewBox=\"0 0 20 20\"><circle cx=\"10\" cy=\"10\" r=\"10\"></circle></svg>';\n    }\n\n    get defaultClass() {\n      return this._defaultClass;\n    }\n\n    get defaultClassPrefix() {\n      return this._defaultClassPrefix;\n    }\n\n    setSvg(key, url) {\n      if (!this.svgMap.has(key)) {\n        const urlSanitized = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, url);\n\n        const svgIcon = {\n          obs: this.http.get(`${urlSanitized}.svg`, {\n            responseType: 'text'\n          }).pipe(share(), map(svgText => {\n            if (svgIcon.svg) {\n              return svgIcon.svg;\n            }\n\n            const svg = this._textToSvg(svgText);\n\n            this._cacheSvgIcon(svg, key);\n\n            return svg;\n          }))\n        };\n        this.svgMap.set(key, svgIcon);\n      }\n    }\n\n    addSvgIconLiteral(key, literal) {\n      if (!this.svgMap.has(key)) {\n        const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n        if (!sanitizedLiteral) {\n          throw new Error(`LyIconService: Failed sanitize '${key}'`);\n        }\n\n        const svg = this._textToSvg(sanitizedLiteral);\n\n        this.svgMap.set(key, {\n          svg\n        });\n      }\n    }\n    /** String to SVG */\n\n\n    _textToSvg(str) {\n      const div = this._document.createElement('DIV');\n\n      div.innerHTML = str;\n      const svg = div.querySelector('svg');\n      return svg;\n    }\n\n    _cacheSvgIcon(svg, key) {\n      const svgIconInfo = this.svgMap.get(key);\n\n      if (!svgIconInfo.svg) {\n        this.svgMap.get(key).svg = svg;\n      }\n    }\n\n    getSvg(key) {\n      if (!this.svgMap.has(key)) {\n        throw new Error(`LyIconService: Icon ${key} not found`);\n      }\n\n      return this.svgMap.get(key);\n    }\n    /**\n     * Set default className for `ly-icon`\n     * @param className class name\n     * @param prefix Class prefix,\n     * For example if you use FontAwesome your prefix would be `fa-`,\n     * then in the template it is no longer necessary to use the prefix\n     * Example: `<ly-icon fontIcon=\"alarm\">`\n     */\n\n\n    setDefaultClass(className, prefix) {\n      this._defaultClass = className;\n      this._defaultClassPrefix = prefix;\n    }\n    /**\n     * Register new font class alias\n     * demo:\n     * For FontAwesome\n     * registerFontClass({\n     *   key: 'fa',\n     *   class: 'fa'\n     *   prefix: 'fa-'\n     * })\n     */\n\n\n    registerFontClass(opt) {\n      this._fontClasses.set(opt.key, opt);\n    }\n\n    getFontClass(key) {\n      return this._fontClasses.get(key);\n    }\n\n  }\n\n  LyIconService.ɵfac = function LyIconService_Factory(t) {\n    return new (t || LyIconService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DomSanitizer), i0.ɵɵinject(DOCUMENT, 8), i0.ɵɵinject(i2$1.LyTheme2));\n  };\n\n  LyIconService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: LyIconService,\n    factory: LyIconService.ɵfac,\n    providedIn: 'root'\n  });\n  return LyIconService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst STYLE_PRIORITY = -2;\n\nconst STYLES = theme => {\n  const loading = keyframesUniqueId.next();\n  const {\n    primary,\n    secondary,\n    tertiary\n  } = theme.background;\n  const lum = primary.default.luminance();\n  let one = lum < .5 ? tertiary : secondary;\n  let two = lum < .5 ? secondary : tertiary;\n  one = one.darken(.25 * (lum < .5 ? -1 : 1.1));\n  two = two.darken(.25 * (lum < .5 ? -1 : 1.1));\n  return {\n    $priority: STYLE_PRIORITY,\n    $global: _className => `@keyframes ${loading}{0%{background-position:200% 50%;}100%{background-position:-200% 50%;}}`,\n    root: () => _className => `${_className}{font-size:${theme.icon.fontSize};width:1em;position:relative;height:1em;display:inline-flex;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;}`,\n    loading: _className => `${_className}{background:${`linear-gradient(270deg, ${one}, ${two}, ${two}, ${one})`};background-size:400% 400%;animation:${loading} 8s ease-in-out infinite;}`,\n    defaultIcon: _className => `${_className}{border-radius:50px;}`\n  };\n};\n/** @docs-private */\n\n\nclass LyIconBase {\n  constructor(_theme) {\n    this._theme = _theme;\n  }\n\n}\n/** @docs-private */\n\n\nconst LyIconMixinBase = mixinStyleUpdater(mixinBg(mixinColor(mixinRaised(mixinOutlined(mixinElevation(mixinShadowColor(LyIconBase)))))));\nlet LyIcon = /*#__PURE__*/(() => {\n  class LyIcon extends LyIconMixinBase {\n    constructor(iconService, _el, _renderer, theme, sRenderer, _platform) {\n      super(theme);\n      this.iconService = iconService;\n      this._el = _el;\n      this._renderer = _renderer;\n      this.sRenderer = sRenderer;\n      this._platform = _platform;\n      this.classes = this.sRenderer.renderSheet(STYLES, true);\n      this.setAutoContrast();\n    }\n\n    get icon() {\n      return this._icon;\n    }\n\n    set icon(val) {\n      this._icon = val;\n\n      this._addDefaultIcon();\n\n      if (this._platform.isBrowser) {\n        this._prepareSvgIcon(this.iconService.getSvg(val));\n      }\n    }\n\n    get fontSet() {\n      return this._fontSet;\n    }\n\n    set fontSet(key) {\n      this._fontSet = key;\n    }\n\n    get fontIcon() {\n      return this._fontIcon;\n    }\n\n    set fontIcon(key) {\n      this._fontIcon = key;\n    }\n    /** @docs-private */\n\n\n    get hostElement() {\n      return this._el.nativeElement;\n    }\n\n    ngOnChanges() {\n      if (this.fontSet || this.fontIcon) {\n        this._updateFontClass();\n      }\n\n      this.updateStyle(this._el);\n    }\n\n    _isDefault() {\n      return !(this.icon || this.fontSet);\n    }\n\n    _prepareSvgIcon(svgIcon) {\n      if (svgIcon.svg) {\n        this._appendChild(svgIcon.svg.cloneNode(true));\n      } else {\n        svgIcon.obs.pipe(take(1)).subscribe(svgElement => {\n          this._appendChild(svgElement.cloneNode(true));\n        });\n      }\n    }\n\n    _appendChild(svg) {\n      this._cleanIcon();\n\n      this._iconElement = svg;\n\n      this._renderer.addClass(svg, this.iconService.classes.svg);\n\n      this._renderer.appendChild(this._el.nativeElement, svg);\n    }\n\n    _addDefaultIcon() {\n      this.sRenderer.addClass(this.classes.defaultIcon);\n      this.sRenderer.addClass(this.classes.loading);\n    } // private _appendDefaultSvgIcon() {\n    //   const svgIcon = this.iconService._textToSvg(this.iconService.defaultSvgIcon) as SVGAElement;\n    //   svgIcon.classList.add(this.classes.loading);\n    //   this._appendChild(svgIcon);\n    // }\n\n\n    _updateClass() {\n      if (this._isDefault() && this.iconService.defaultClass) {\n        this._renderer.addClass(this._el.nativeElement, this.iconService.defaultClass);\n      }\n    }\n\n    ngOnInit() {\n      this._updateClass();\n    }\n\n    ngOnDestroy() {\n      this._cleanIcon();\n    }\n    /**\n     * run only browser\n     * remove current icon\n     */\n\n\n    _cleanIcon() {\n      const icon = this._iconElement;\n      this.sRenderer.removeClass(this.classes.defaultIcon);\n      this.sRenderer.removeClass(this.classes.loading);\n\n      if (icon) {\n        this._renderer.removeChild(this._el.nativeElement, icon);\n\n        this._iconElement = undefined;\n      }\n    }\n\n    _updateFontClass() {\n      const currentClass = this._currentClass;\n      const fontSetKey = this.fontSet;\n      const icon = this.fontIcon;\n      const el = this._el.nativeElement;\n      const iconClass = this.iconService.getFontClass(fontSetKey);\n\n      if (currentClass) {\n        this._renderer.removeClass(el, currentClass);\n      }\n\n      if (this._previousFontSet) {\n        if (this._previousFontSet.class) {\n          this._renderer.removeClass(el, this._previousFontSet.class);\n        }\n      }\n\n      if (iconClass) {\n        this._previousFontSet = iconClass;\n      } else {\n        throw new Error(`Icon with key${fontSetKey} not found`);\n      }\n\n      this._currentClass = `${iconClass.prefix}${icon}`;\n\n      this._renderer.addClass(el, this._currentClass);\n    }\n\n  }\n\n  LyIcon.ɵfac = function LyIcon_Factory(t) {\n    return new (t || LyIcon)(i0.ɵɵdirectiveInject(LyIconService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2$1.LyTheme2), i0.ɵɵdirectiveInject(i2$1.StyleRenderer), i0.ɵɵdirectiveInject(i3.Platform));\n  };\n\n  LyIcon.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: LyIcon,\n    selectors: [[\"ly-icon\"]],\n    inputs: {\n      bg: \"bg\",\n      color: \"color\",\n      raised: \"raised\",\n      outlined: \"outlined\",\n      elevation: \"elevation\",\n      shadowColor: \"shadowColor\",\n      icon: \"icon\",\n      fontSet: \"fontSet\",\n      fontIcon: \"fontIcon\"\n    },\n    exportAs: [\"lyIcon\"],\n    features: [i0.ɵɵProvidersFeature([StyleRenderer]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n  });\n  return LyIcon;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet LyIconModule = /*#__PURE__*/(() => {\n  class LyIconModule {}\n\n  LyIconModule.ɵfac = function LyIconModule_Factory(t) {\n    return new (t || LyIconModule)();\n  };\n\n  LyIconModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: LyIconModule\n  });\n  LyIconModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [LyCommonModule]\n  });\n  return LyIconModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { LyIcon, LyIconBase, LyIconMixinBase, LyIconModule, LyIconService, STYLES }; //# sourceMappingURL=alyle-ui-icon.mjs.map","map":null,"metadata":{},"sourceType":"module"}