{"ast":null,"code":"const EPS = 1e-7;\nconst MAX_ITER = 20;\nconst {\n  pow,\n  min,\n  max\n} = Math;\n\nclass Color {\n  constructor(...args) {\n    if (args.length < 3 && args.length > 0) {\n      this._color = bigIntToRgb(args[0], args[1]);\n    } else if (args.length > 2) {\n      this._color = args; // Set default alpha\n\n      if (args.length === 3) {\n        this._color[3] = 1;\n      }\n    } else {\n      this._color = [];\n    }\n  }\n\n  rgba() {\n    return this._color.slice(0);\n  }\n\n  alpha(value) {\n    if (value === void 0) {\n      return this._color[3];\n    } // Clone\n\n\n    const _color = this.rgba(); // Set alpha\n\n\n    _color[3] = value;\n    return new Color(..._color);\n  }\n\n  luminance(lum) {\n    if (lum === void 0) {\n      return rgbToLuminance(...this._color);\n    }\n\n    if (lum === 0) {\n      // return pure black\n      return new Color(0, 0, 0, this._color[3]);\n    }\n\n    if (lum === 1) {\n      // return pure white\n      return new Color(255, 255, 255, this._color[3]);\n    }\n\n    const relativeLuminance = this.luminance();\n    let max_iter = MAX_ITER;\n\n    const test = (low, high) => {\n      const mid = new Color(...interpolateRgb(low.rgba(), high.rgba(), 0.5));\n      const lm = mid.luminance();\n\n      if (Math.abs(lum - lm) < EPS || !max_iter--) {\n        return mid;\n      }\n\n      return lm > lum ? test(low, mid) : test(mid, high);\n    };\n\n    const rgb = (relativeLuminance > lum ? test(new Color(0, 0, 0), this) : test(this, new Color(255, 255, 255))).rgba();\n    rgb.pop();\n    rgb.push(this._color[3]);\n    return new Color(...rgb);\n  }\n  /**\n   * Changes the saturation of a color by manipulating the Lch chromaticity.\n   * @param amount default: 1\n   */\n\n\n  saturate(amount = 1) {\n    const lab = rgbToLab(this._color);\n    const lch = labToLch(lab);\n    lch[1] += 18 * amount;\n\n    if (lch[1] < 0) {\n      lch[1] = 0;\n    }\n\n    const labFromLch = lchToLab(lch);\n    const xyzFromLab = labToXyz(labFromLch);\n    const rgb = xyzToRgb(xyzFromLab); // Set alpha\n\n    rgb.push(this._color[3]);\n    return new Color(...rgb);\n  }\n  /**\n   * Similar to saturate, but the opposite direction.\n   * @param amount default: 1\n   */\n\n\n  desaturate(amount = 1) {\n    return this.saturate(-amount);\n  }\n  /**\n   * @param amount default: 1\n   */\n\n\n  darken(amount = 1) {\n    const lab = rgbToLab(this._color);\n    lab[0] -= 18 * amount;\n    const xyzFromLab = labToXyz(lab);\n    const rgb = xyzToRgb(xyzFromLab); // Set alpha\n\n    rgb.push(this._color[3]);\n    return new Color(...rgb);\n  }\n  /**\n   * The opposite of darken\n   * @param amount default 1\n   */\n\n\n  brighten(amount = 1) {\n    return this.darken(-amount);\n  }\n\n  css() {\n    if (!this._color.length) {\n      return 'undefined - invalid color';\n    }\n\n    return rgbToCss(this.rgba());\n  }\n\n  toString() {\n    return this.css();\n  }\n\n} // /**\n//  * Convert number to CSS\n//  * 0x00bcd4 > #00bcd4\n//  * @param int Int\n//  */\n// function bigIntToCss(int: number) {\n//   const hex = int.toString(16);\n//   return '#000000'.substring(0, 7 - hex.length) + hex;\n// }\n\n\nfunction rgbToCss(rgb) {\n  const alpha = rgb.pop();\n\n  if (alpha === 1) {\n    return `rgb(${rgb.map(Math.round).join()})`;\n  }\n\n  return `rgba(${rgb.map(Math.round).join()},${alpha})`;\n}\n\nfunction bigIntToRgb(bigInt, alpha = 1) {\n  // if (bigInt < 0x1000) {\n  //   bigInt = parseInt(bigInt.toString(16).split('').map(char => {\n  //     return char + char;\n  //   }).join(''), 16);\n  // }\n  // tslint:disable-next-line: no-bitwise\n  const red = bigInt >> 16 & 0xff; // tslint:disable-next-line: no-bitwise\n\n  const green = bigInt >> 8 & 0xff; // tslint:disable-next-line: no-bitwise\n\n  const blue = bigInt & 0xff;\n  return [red, green, blue, alpha];\n} // function rgbToBigInt(r: number, g: number, b: number) {\n//   // tslint:disable-next-line: no-bitwise\n//   return (r << 16) + (g << 8) + b;\n// }\n\n\nfunction rgbToXyz(rgb) {\n  let r = rgb[0] / 255;\n  let g = rgb[1] / 255;\n  let b = rgb[2] / 255; // Assume sRGB\n\n  r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;\n  g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;\n  b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;\n  const x = r * 0.4124 + g * 0.3576 + b * 0.1805;\n  const y = r * 0.2126 + g * 0.7152 + b * 0.0722;\n  const z = r * 0.0193 + g * 0.1192 + b * 0.9505;\n  return [x * 100, y * 100, z * 100];\n}\n\nfunction rgbToLab(rgb) {\n  const xyz = rgbToXyz(rgb);\n  let x = xyz[0];\n  let y = xyz[1];\n  let z = xyz[2];\n  x /= 95.047;\n  y /= 100;\n  z /= 108.883;\n  x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;\n  y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;\n  z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;\n  const l = 116 * y - 16;\n  const a = 500 * (x - y);\n  const b = 200 * (y - z);\n  return [l, a, b];\n}\n\nfunction labToLch(lab) {\n  const l = lab[0];\n  const a = lab[1];\n  const b = lab[2];\n  let h;\n  const hr = Math.atan2(b, a);\n  h = hr * 360 / 2 / Math.PI;\n\n  if (h < 0) {\n    h += 360;\n  }\n\n  const c = Math.sqrt(a * a + b * b);\n  return [l, c, h];\n}\n\nfunction lchToLab(lch) {\n  const l = lch[0];\n  const c = lch[1];\n  const h = lch[2];\n  const hr = h / 360 * 2 * Math.PI;\n  const a = c * Math.cos(hr);\n  const b = c * Math.sin(hr);\n  return [l, a, b];\n}\n\nfunction labToXyz(lab) {\n  const l = lab[0];\n  const a = lab[1];\n  const b = lab[2];\n  let x;\n  let y;\n  let z;\n  y = (l + 16) / 116;\n  x = a / 500 + y;\n  z = y - b / 200;\n  const y2 = Math.pow(y, 3);\n  const x2 = Math.pow(x, 3);\n  const z2 = Math.pow(z, 3);\n  y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n  x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n  z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n  x *= 95.047;\n  y *= 100;\n  z *= 108.883;\n  return [x, y, z];\n}\n\nfunction xyzToRgb(xyz) {\n  const x = xyz[0] / 100;\n  const y = xyz[1] / 100;\n  const z = xyz[2] / 100;\n  let r;\n  let g;\n  let b;\n  r = x * 3.2406 + y * -1.5372 + z * -0.4986;\n  g = x * -0.9689 + y * 1.8758 + z * 0.0415;\n  b = x * 0.0557 + y * -0.2040 + z * 1.0570; // Assume sRGB\n\n  r = r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r * 12.92;\n  g = g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g * 12.92;\n  b = b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b * 12.92;\n  r = min(max(0, r), 1);\n  g = min(max(0, g), 1);\n  b = min(max(0, b), 1);\n  return [r * 255, g * 255, b * 255];\n}\n\nfunction rgbToLuminance(r, g, b) {\n  // Relative luminance\n  // See http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n  r = luminance_channel(r);\n  g = luminance_channel(g);\n  b = luminance_channel(b);\n  return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n}\n\nfunction luminance_channel(x) {\n  x /= 255;\n  return x <= 0.03928 ? x / 12.92 : pow((x + 0.055) / 1.055, 2.4);\n}\n\nfunction interpolateRgb(rgb1, rgb2, f = 0.5) {\n  return [rgb1[0] + f * (rgb2[0] - rgb1[0]), rgb1[1] + f * (rgb2[1] - rgb1[1]), rgb1[2] + f * (rgb2[2] - rgb1[2])];\n}\n\nfunction hexColorToInt(_color) {\n  if (_color.startsWith('#')) {\n    return parseInt(_color.slice(1), 16);\n  }\n\n  throw new Error(`Expected to start with '#' the given value is: ${_color}`);\n}\n\nfunction color(...args) {\n  return new Color(...args);\n}\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { Color, color, hexColorToInt }; //# sourceMappingURL=alyle-ui-color.mjs.map","map":null,"metadata":{},"sourceType":"module"}