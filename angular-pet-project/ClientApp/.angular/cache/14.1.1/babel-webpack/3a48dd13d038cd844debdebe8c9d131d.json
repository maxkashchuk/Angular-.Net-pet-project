{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { Component, ChangeDetectionStrategy, ViewChild, Inject } from '@angular/core';\nimport { lyl, StyleRenderer } from '@alyle/ui';\nimport { STYLES as CROPPER_STYLES, LyImageCropper } from '@alyle/ui/image-cropper';\nimport { Platform } from '@angular/cdk/platform';\nimport { LyDialogRef, LY_DIALOG_DATA } from '@alyle/ui/dialog';\n\nconst STYLES = (_theme, ref) => {\n  ref.renderStyleSheet(CROPPER_STYLES);\n  const cropper = ref.selectorsOf(CROPPER_STYLES);\n  return {\n    root: lyl`{\n      ${cropper.root} {\n        max-width: 400px\n        height: 300px\n      }\n    }`,\n    sliderContainer: lyl`{\n      text-align: center\n      max-width: 400px\n      margin: 14px\n    }`,\n    cropResult: lyl`{\n      border-radius: 50%\n    }`\n  };\n};\n\nlet CropCircleComponent = class CropCircleComponent {\n  constructor(sRenderer, _platform, dialogRef, data) {\n    this.sRenderer = sRenderer;\n    this._platform = _platform;\n    this.dialogRef = dialogRef;\n    this.data = data;\n    this.classes = this.sRenderer.renderSheet(STYLES, 'root');\n    this.myConfig = {\n      width: 150,\n      height: 150,\n      fill: '#ff2997',\n      type: 'image/png',\n      round: true\n    };\n  }\n\n  ngAfterViewInit() {\n    // demo: Load image from URL and update position, scale, rotate\n    // this is supported only for browsers\n    if (this._platform.isBrowser) {\n      const config = {\n        scale: 0.745864772531767,\n        xOrigin: 642.380608078103,\n        yOrigin: 236.26357452128866,\n        // rotation: 90,\n        originalDataURL: this.data.image\n      };\n      this.cropper.loadImage(config);\n    }\n  }\n\n  onCropped(e) {\n    this.croppedImage = e.dataURL;\n    console.log('cropped img: ', e);\n  }\n\n  onLoaded(e) {\n    console.log('img loaded', e);\n  }\n\n  onError(e) {\n    console.warn(`'${e.name}' is not a valid image`, e);\n  }\n\n  onSliderInput(event) {\n    this.scale = event.value;\n  }\n\n};\n\n__decorate([ViewChild(LyImageCropper, {\n  static: true\n}), __metadata(\"design:type\", LyImageCropper)], CropCircleComponent.prototype, \"cropper\", void 0);\n\nCropCircleComponent = __decorate([Component({\n  selector: 'aui-crop-circle',\n  templateUrl: './cropper-circle.component.html',\n  styleUrls: ['./cropper-circle.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [StyleRenderer]\n}), __param(3, Inject(LY_DIALOG_DATA)), __metadata(\"design:paramtypes\", [StyleRenderer, Platform, LyDialogRef, Object])], CropCircleComponent);\nexport { CropCircleComponent };","map":null,"metadata":{},"sourceType":"module"}